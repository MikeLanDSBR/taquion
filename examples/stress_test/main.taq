package main

// Constantes globais
const MAX_PRINTS = 5;
const PLAYER_LEVEL = 10;

// Exemplo de função recursiva: Fibonacci
func fibonacci(n) {
    if (n < 2) {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

// Verifica se um número é primo
// CORREÇÃO: A função agora retorna i32 (1 para true, 0 para false)
func isPrime(n) {
    if (n < 2) { return 0; } // false
    if (n < 4) { return 1; } // true
    if ((n % 2) == 0) { return 0; } // false
    if ((n % 3) == 0) { return 0; } // false

    let i = 5;
    while (i * i < (n + 1)) {
        if ((n % i) == 0) {
            return 0; // false
        }
        i = i + 2;
    }
    return 1; // true
}

func main() {
    // === Teste Básico de Impressão e Strings ===
    print("--- Iniciando Teste de Capacidade do TaquionC ---");
    let world_word = "Mundo";
    let hello_message = "Olá, " + world_word + "!";
    print(hello_message);
    print("");

    // === Teste de Recursão e Funções ===
    print("--- Testando Funções e Recursão ---");
    let fib_num = 9;
    print("O número de Fibonacci para 9 é:");
    print(fibonacci(fib_num));
    print("");

    // === Teste de Loops, Condicionais e Booleanos ===
    print("--- Testando Loops, Condicionais e Booleanos ---");
    print("Procurando os primeiros 5 números primos depois de 10:");
    let count = 0;
    let current_num = 11;
    while (true) {
        if (count == MAX_PRINTS) {
            print("Busca de primos finalizada.");
            break;
        }

        // CORREÇÃO: Compara o resultado de isPrime com 1 para gerar um booleano
        if (isPrime(current_num) == 1) {
            print("Primo encontrado:");
            print(current_num);
            count = count + 1;
        } else {
            current_num = current_num + 1;
            continue;
        }
        current_num = current_num + 1;
    }
    print("");

    // === Teste de Arrays e Atribuição ===
    print("--- Testando Arrays ---");
    let inventory = [101, 205, 301, 0, 0];
    print("ID do item no slot 1:");
    print(inventory[1]);

    print("Substituindo item no slot 1...");
    inventory[1] = 210;
    print("Novo ID do item no slot 1:");
    print(inventory[1]);
    print("");

    // === Teste de Escopo e Precedência Matemática ===
    print("--- Testando Escopo e Matemática ---");
    let base_damage = 50;
    if (true) {
        let base_damage = 10;
        let total_damage = base_damage + PLAYER_LEVEL * 2;
        print("Dano calculado no escopo interno (deve ser 10 + 10 * 2 = 30):");
        print(total_damage);
    }
    let total_damage = base_damage + PLAYER_LEVEL * 3;
    print("Dano calculado no escopo externo (deve ser 50 + 10 * 3 = 80):");
    print(total_damage);
    print("");

    print("--- Teste de Capacidade Concluído ---");
    return 0;
}